#!/usr/bin/env ruby

require 'gli'
require 'json'
require 'rainbow'

require 'veye'

include GLI::App

program_desc 'VersionEye commandline tool'
program_long_desc Veye::BIGEYE.foreground(:green)

wrap_help_text :verbatim
version Veye::VERSION

config_file '.veye.rc'

desc 'set server url'
flag :server, :default_value => "versioneye.com"

desc 'set service port'
flag :port, :default_value => ""

desc 'set service path'
flag :path, :default_value => "api/v1"

desc 'set connection protocol'
flag :protocol, :default_value => "https"

desc "don't use colors"
switch 'color', :default_value => true, :negetable => true

pre do |global_options, options, args|
    $global_options = global_options
   
    protocol = global_options[:protocol]
    server = global_options[:server]
    port = global_options.fetch(:port, "")
    path = global_options[:path]
    unless port.empty?
        resource_url = "#{protocol}://#{server}:#{port}/#{path}"
    else
        resource_url = "#{protocol}://#{server}/#{path}"
    end

    $global_options[:url] = resource_url
end

desc 'check service status'
command :ping do |c|
 c.action do |global_options, options, args|
    Veye::Service.ping()
 end
end

desc 'Search packages on VersionEye.'
arg_name 'search_term'
command :search do |c|
    c.desc 'filter results by language'
    c.flag [:l, :language, 'language-name']

    c.desc 'filter result by Manven specific GroupId'
    c.flag "group-id"

    c.desc "get next N results, by default it only return 30 results."
    c.flag [:page, 'page-number']

    c.desc "change output format"
    c.flag [:format,'format-name'], :default_value => "pretty"

    c.action do |global_options, options, args|
        help_now!("search term is mandatory.") if args.empty?
        search_term = args.shift
        response = Veye::PackageSearch.search(search_term, 
                                             options[:language], 
                                             options["group-id"], 
                                             options[:page])
        search_results = response[:results]
        if search_results.empty?
            error_msg = sprintf("No results for `%s` with given params: %s",
                                 response[:params][:q].foreground(:yellow),
                                 response[:params].to_s.foreground(:default))
            exit_now!(error_msg)
        end

        Veye::PackageSearch.format(search_results, options[:format])
  end
end

desc 'returns package information'
arg_name 'product_key'
command :info do |c|
    c.desc "change output format"
    c.flag [:format, 'format-name'], :default_value => 'pretty'

    c.action do |global_options, options, args|
      help_now!("package_key is missing") if args.empty?
      package_key = args.shift
      response = Veye::Package::Info.search(package_key)
      
      if response[:results].empty?
          error_msg = sprintf("Didnt find any package with product_key: `%s`",
                            "#{response[:params][:q]}".foreground(:yellow))
          exit_now!(error_msg)
      end

      Veye::Package::Info.format(response[:results], options[:format])
    end
end

exit run(ARGV)

#!/usr/bin/env ruby
require 'gli'
require 'rainbow'
require 'veye'

include GLI::App


program_desc 'VersionEye commandline tool'

version Veye::VERSION

desc 'Describe some switch here'
switch [:s,:switch]

desc 'Describe some flag here'
default_value 'the default'
arg_name 'The name of the argument'
flag [:f,:flagname]


public_api = Veye::API::Resource.new

desc 'check service status'
arg_name 'Describe arguments to ping here'
command :ping do |c|
  c.flag :f
  c.action do |global_options,options,args|
	response = public_api.getJSON('/ping.json')
  	unless response.nil?
  		status =  "up".foreground(:green)
  	else
		  status =  "down".foreground(:red)
  	end

  	puts "VersionEye is: #{status}"
  end
end

desc 'Describe search here'
arg_name 'search_term'

command :search do |c|
  c.action do |global_options,options,args|
    help_now!("search term is mandatory.") if args.empty?
    search_term = args.shift
    search_api = Veye::API::Resource.new "/products/search"
    puts search_api
    search_api.resource["/#{search_term}.json"].get do |response, request, result, &block|
        if result.code.to_i == 200
          search_results = JSON.parse(response)
          puts JSON.pretty_generate(search_results)
        else
          puts "Didnt found results for `#{search_term.foreground(:yellow)}`"
          puts "Url: #{request.url}"
        end
    end
  end
end

desc 'returns package information'
arg_name 'package_key'
command :info do |c|
  c.action do |global_options,options,args|
    puts global_options, options, args
    help_now!("package_key is missing") if args.empty?
    package_key = args.shift
    puts "Searching information about: #{package_key.foreground(:green)}"
    public_api.resource["/products/#{package_key}.json"].get do |response, request, result, &block|
        if result.code.to_i == 200
          col_widths = [20, 60]
          row_format = "%-#{25}s: %s\n"
          package_info = JSON.parse(response)
          package_info[:url] = request.url
          package_info.each_pair do |key, value|
            value = value.to_s.gsub(/\s+/, " ") 
            if value.length < col_widths[1] 
                printf row_format, key.to_s.foreground(:green), value
            else
                0.step(value.length, 40) do |pos|
                  line = value[pos..pos+40].strip      
                  printf row_format, key.to_s.foreground(:green), line
                  key = "" 
                end 
            end    
          end        
        else
          puts "Didnt found package key: `#{package_key.foreground(:yellow)}`"
          puts "Code: #{result.code.foreground(:red)}"
          puts request.url
        end
    end
  end
end

pre do |global,command,options,args|
  # Pre logic here
  # Return true to proceed; false to abort and not call the
  # chosen command
  # Use skips_pre before a command to skip this block
  # on that command only
  true
end

post do |global,command,options,args|
  # Post logic here
  # Use skips_post before a command to skip this
  # block on that command only
end

on_error do |exception|
  # Error logic here
  # return false to skip default error handling
  true
end

exit run(ARGV)

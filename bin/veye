#!/usr/bin/env ruby

require 'gli'
require 'rest-client'
require 'json'
require 'rainbow'
require 'rainbow/ext/string'

require 'veye'

include GLI::App

program_desc 'VersionEye commandline tool'
program_long_desc Rainbow(Veye::BIGEYE).to_s.color(:green)

wrap_help_text :verbatim
version Veye::VERSION

COMMANDS_WITHOUT_API_KEY = [:help, :ping]

config_file '.veye.rc'

desc 'set api key'
flag :api_key, :default_value => "<add your api key here>"

desc 'set server url'
flag :server, :default_value => "www.versioneye.com"

desc 'set service port'
flag :port, :default_value => ""

desc 'set service path'
flag :path, :default_value => "api/v2"

desc 'set connection protocol'
flag :protocol, :default_value => "https"

desc "don't use colors"
switch 'color', :default_value => true, :negetable => true

desc 'force timeout (in seconds)'
flag :timeout, :default_value => 180

desc 'force open timeout (in seconds)'
flag :open_timeout, :default_value => 20

pre do |global_options, command, args|
  check_config_file
  $global_options = init_environment
  $global_options.merge!(global_options)
  needs_api_key = !COMMANDS_WITHOUT_API_KEY.member?(command.name)
  check_configs($global_options, needs_api_key)
  $global_options[:url] = Veye::API::Resource.build_url($global_options)
end

desc 'check service status'
command :ping do |c|
  c.action do |global_options, options, args|
    Veye::Service.ping
  end
end

desc 'change the api key'
arg_name 'api_key'
command :change_key do |c|
  c.action do |global_options, options, args|
    help_now!("the api key is mandatory") if args.empty?
    api_key = args.shift
    $global_options[:api_key] = api_key
    save_configs
  end
end

desc 'Search packages on VersionEye.'
arg_name 'search_term'
command :search do |c|
  c.desc 'filter results by language'
  c.flag [:l, :language, 'language-name']

  c.desc 'filter result by Maven specific GroupId'
  c.flag [:gid, "group-id"]

  c.desc "get next N results, by default it only return 30 results."
  c.flag [:page, 'page-number'], :default_value => 1

  c.desc "change output format"
  c.flag [:format,'format-name'], :default_value => "pretty"

  c.desc "show paging information"
  c.switch [:pagination, 'show-pagination'], :default_value => true,
                                             :negatable => true

  c.action do |global_options, options, args|
    error_msg = "the search term is mandatory.".color(:red)
    help_now!(error_msg) if args.empty?

    api_key = global_options[:api_key]
    search_term = args.shift
    Veye::Package::Search.search(api_key, search_term, options)
  end
end


desc 'analyzes given project file and returns version info'
arg_name 'product_file'

command :check do |c|
  c.desc "change output format"
  c.flag [:format, 'format-name'], :default_value => 'pretty'

  c.action do |global_options, options, args|
    file_path = args.shift
    file_path ||= Dir.pwd

    api_key = global_options[:api_key]
    files = Veye::Project.get_files(file_path)

    if files.empty?
      printf "Found no project files in: ".color(:red) + file_path + "\n"
    else
      Veye::Project::Check.check(api_key, file_path, files, options)
    end
  end
end


desc 'manage your projects'
arg_name 'subcommand'
command :projects do |c|
  c.desc "change output format"
  c.flag [:format, 'format-name'], :default_value => 'pretty'

  c.desc "show all dependencies"
  c.flag [:all, 'show-all'], default_value: false

	c.desc "filter by organisation name"
	c.flag [:org, 'org-name'], :default_value => 'private'

	c.desc 'filter by team name'
	c.flag [:team, 'team-name']

	c.desc 'specify project visibility when uploading a new project'
	c.flag [:public, 'is-public'], :default_value => true

	c.desc 'mark it as temporary project when uploading a new project'
	c.flag [:temp, :temporary], :default_value => false

  c.desc "show all projects"
  c.command :list do |list|
    list.action do |global_options, options, args|
      api_key = global_options[:api_key]

      Veye::Project::Check.get_list(api_key, options[:org], options[:team], options)
    end
  end

  c.desc "show project info"
  c.arg_name "project_key"
  c.command :info do |info|
    info.action do |global_options, options, args|
      help_now!("Project_key is unspecified".color(:red)) if args.empty?
      proj_key = args.shift
      api_key = global_options[:api_key]

      Veye::Project::Check.get_project(api_key, proj_key, options)
    end
  end

  c.desc "upload new project file"
  c.arg_name "filepath"
  c.command :upload do |upload|
    upload.action do |global_options, options, args|
      help_now!("The filepath is missing.".color(:red)) if args.empty?
      filename = args.shift
      api_key = global_options[:api_key]
			org_name = (options[:org] || 'private')
			is_temp  = (options[:temp] == true)
			visibility = (options[:public] == false ? 'private' : 'public')

      Veye::Project::Check.upload(api_key, filename, org_name, options[:team], is_temp, visibility, options)
   end
  end

  c.desc "update existing project file"
  c.arg_name "project_key_and_filepath", multiple: true
  c.command :update do |update|
    update.action do |global_options, options, args|
      help_now!("The project key and the filepath are missing".color(:red)) if args.empty?
      help_now!("One argument is missing: a project key or filepath".color(:red)) if args.count == 1

      project_key, filename = args
      api_key = global_options[:api_key]
      Veye::Project::Check.update(api_key, project_key, filename, options)
    end
  end

  c.desc "show licenses of subdependencies"
  c.arg_name "project_key"
  c.command :licenses do |licenses|
    licenses.action do |global_options, options, args|
      help_now!("Project's key is unspecified".color(:red)) if args.empty?
      proj_key = args.shift
      api_key = global_options[:api_key]
      Veye::Project::License.get_licenses(api_key, proj_key, options)
    end
  end

  c.desc "delete project"
  c.arg_name "project_key"
  c.command :delete do |delete|
    delete.action do |global_options, options, args|
      help_now!("Project is missing".color(:red)) if args.empty?
      proj_key = args.shift
      api_key = global_options[:api_key]
      Veye::Project::Check.delete_project(api_key, proj_key)
    end
  end
end

desc "package related methods"
command :package do |c|
  c.desc 'specify a language of the product'
  c.flag [:l, :language, 'language-name']
  
  c.desc "change output format"
  c.flag [:format, 'format-name'], :default_value => 'pretty'

  c.desc 'returns package information'
  c.arg_name 'prod_key'
  c.command :info do |csub|
    csub.desc 'specify a version of the product'
    csub.flag [:v, :version, 'version-id']

    csub.action do |global_options, options, args|
      error_msg = Rainbow("The package ID is unspecified").red
      help_now!(error_msg) if args.empty?

      error_msg = 'no language specified - use -l/--language/--language-name key'.color(:red)
      help_now!(error_msg) if options[:language].nil?

      api_key = global_options[:api_key]
      package_key = args.shift
      Veye::Package::Info.get_package(api_key, package_key, options[:language], options[:version], options)
    end
  end

  c.desc 'check a references of package'
  c.arg_name 'prod_key'
  c.command :references do |csub|
    csub.desc "page number for pagination"
    csub.flag [:page, 'page-number'], :default_value => 1

    csub.desc "show paging information"
    csub.switch [:pagination, 'show-pagination'], :default_value => true, :negatable => true

    csub.action do |global_options, options, args|
      error_msg = Rainbow("The package ID is unspecified").red
      help_now!(error_msg) if args.empty?
      error_msg = 'no language specified - use -l/--language/--language-name key'.color(:red)
      help_now!(error_msg) if options[:language].nil?

      prod_key = args.shift
      api_key = global_options[:api_key]
      Veye::Package::References.get_references(api_key, prod_key, options[:language], options)
    end
  end

  c.desc 'fetch list of versions'
  c.arg_name 'prod_key'
  c.command :versions do |csub|
    csub.desc "number of versions to show"
    csub.flag [:n, 'n-results'], :default_value => 10

    csub.desc 'number of versions to skip'
    csub.flag [:from], :default_value => 0

    csub.action do |global_options, options, args|
      help_now!("The product ID is unspecified".color(:red)) if args.empty?
      error_msg = 'no language specified - use -l/--language/--language-name key'.color(:red)
      help_now!(error_msg) if options[:language].nil?

      prod_key = args.shift
      api_key = global_options[:api_key]
      Veye::Package::Versions.get_list(api_key, prod_key, options[:language], options[:n], options[:from], options)
    end
  end

  c.desc "check your following status"
  c.arg_name "prod_key"
  c.command :following do |following|
    following.action do |global_options, options, args|
      help_now!("The product ID is unspecified".color(:red)) if args.empty?
      error_msg = 'no language specified - use -l/--language/--language-name key'.color(:red)
      help_now!(error_msg) if options[:language].nil?

      prod_key = args.shift
      api_key = global_options[:api_key]
      Veye::Package::Follow.get_follow_status(api_key, prod_key, options[:language])
    end
  end

  c.desc "start following specific software package"
  c.arg_name "prod_key"
  c.command :follow do |follow|
    follow.action do |global_options, options, args|
      help_now!("The product ID is unspecified".color(:red)) if args.empty?
      error_msg = 'no language specified - use -l/--language/--language-name key'.color(:red)
      help_now!(error_msg) if options[:language].nil?

      prod_key = args.shift
      api_key = global_options[:api_key]
      Veye::Package::Follow.follow(api_key, prod_key, options[:language])
    end
  end

  c.desc "stop following given software package"
  c.arg_name "prod_key"
  c.command :unfollow do |unfollow|
    unfollow.action do |global_options, options, args|
      help_now!("The product ID is unspecified".color(:red)) if args.empty?
      error_msg = 'no language specified - use -l/--language/--language-name key'.color(:red)
      help_now!(error_msg) if options[:language].nil?

      prod_key = args.shift
      api_key = global_options[:api_key]
      Veye::Package::Follow.unfollow(api_key, prod_key, options[:language])
    end
  end
end

desc "handle your personal data"
command :me do |c|
  c.desc "change output format"
  c.flag [:format, 'format-name'], :default_value => 'pretty'

  c.desc "pagination number"
  c.flag [:page, 'page-number'], :default_value => 1

  c.desc "show paging information"
  c.switch [:pagination, 'show-pagination'],
            :default_value => true,
            :negatable => true

  c.desc "get profile information"
  c.action do |global_options, options, args|
    api_key = global_options[:api_key]
    Veye::User::Me.get_profile(api_key, options)
  end

  c.desc "get your favorite packages"
  c.command :favorites do |favorites|
    favorites.action do |global_options, options, args|
      api_key = global_options[:api_key]
      Veye::User::Me.get_favorites(api_key, options)
    end
  end
end

desc "work with github repositories"
command :github do |c|
  c.desc "change output format"
  c.flag [:format, 'format-name'], :default_value => 'pretty'
  c.desc "page number for pagination"
  c.flag [:page, 'page-number'], :default_value => 1

  c.desc "show paging information"
  c.switch [:pagination, 'show-pagination'], :default_value => true,
                                             :negatable => true

  c.desc "filter by language"
  c.flag [:lang, :language]

  c.desc "filter by user"
  c.flag [:user]

  c.desc "specify branch"
  c.flag [:branch], :default_value => "master"

  c.desc "specify the name of the project file"
  c.flag [:file, 'file', 'filename'], :default_value => nil

  c.action do |global_options, options, args|
    help_now!
  end

  c.desc "list all your repositories"
  c.command :list do |list|
    list.desc "filter by visibility, (accepts: true/false)"
    list.flag [:private]

    list.desc "filter by name of organisation"
    list.flag [:org, 'org-name']

    list.desc "filter by type of organisation"
    list.flag ['org-type']

    list.action do |global_options, options, args|
      api_key = global_options[:api_key]
      Veye::Github::List.get_list(api_key, options)
    end
  end #end-of-list

  c.desc "update list of repositories"
  c.command :sync do |sync|
    sync.desc "if true, then reloads all collections"
    sync.switch [:force], :default_value => false

    sync.action do |global_options, options, args|
      api_key = global_options[:api_key]
      Veye::Github::Sync.import_all(api_key, options)
    end
  end #end of sync

  c.desc "show more specific information for the repository"
  c.arg_name "repo_name"
  c.command :info do |info|
    info.action do |global_options, options, args|
      help_now!("the name of repository is mandatory".color(:red)) if args.empty?
      repo_name = args.shift
      api_key = global_options[:api_key]
      Veye::Github::Info.get_repo(api_key, repo_name, options)
    end
  end # end of info

  c.desc "import project from github repository"
  c.arg_name "repo_name"
  c.command :import do |imp|
    imp.action do |global_options, options, args|
      help_now!("the name of repository is mandatory".color(:red)) if args.empty?
      repo_name = args.shift
      api_key = global_options[:api_key]
      branch = (options[:branch] || 'master')
      filename = (options['file'] || 'Gemfile')

      Veye::Github::Import.import_repo(api_key, repo_name, branch, filename, options)
    end
  end # end of import

  c.desc "remove imported project"
  c.arg_name "repo_name"
  c.command :delete do |del|
    del.action do |global_options, options, args|
      help_now!("the name of repository is mandatory".color(:red)) if args.empty?
      repo_name = args.shift
      api_key = global_options[:api_key]

      Veye::Github::Delete.delete_repo(api_key, repo_name, options)
    end
  end
end #end of github comamnd

exit run(ARGV)
